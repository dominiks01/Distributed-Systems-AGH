//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `SmartHome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

// import { Ice } from "ice";
import { Ice } from "ice";

const _ModuleRegistry = Ice._ModuleRegistry;
const Slice = Ice.Slice;

let Enums = _ModuleRegistry.module("Enums");

Enums.Mode = Slice.defineEnum([
    ['ACTIVE', 0], ['RESTRICTED', 1]]);

Enums.Levels = Slice.defineEnum([
    ['LOW', 0], ['MEDIUM', 1], ['HIGH', 2]]);

let Errors = _ModuleRegistry.module("Errors");

Errors.ActionNotPermitted = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::Errors::ActionNotPermitted";
    }

    _mostDerivedType()
    {
        return Errors.ActionNotPermitted;
    }
};

Errors.SensitivityLevelOutOfRange = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::Errors::SensitivityLevelOutOfRange";
    }

    _mostDerivedType()
    {
        return Errors.SensitivityLevelOutOfRange;
    }
};

Errors.UnknownColor = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::Errors::UnknownColor";
    }

    _mostDerivedType()
    {
        return Errors.UnknownColor;
    }
};

Errors.BrightnessLevelOutOfRange = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::Errors::BrightnessLevelOutOfRange";
    }

    _mostDerivedType()
    {
        return Errors.BrightnessLevelOutOfRange;
    }
};

let Interfaces = _ModuleRegistry.module("Interfaces");

const iceC_Interfaces_SmartDevice_ids = [
    "::Ice::Object",
    "::Interfaces::SmartDevice"
];

Interfaces.SmartDevice = class extends Ice.Object
{
};

Interfaces.SmartDevicePrx = class extends Ice.ObjectPrx
{
};

Slice.defineOperations(Interfaces.SmartDevice, Interfaces.SmartDevicePrx, iceC_Interfaces_SmartDevice_ids, 1,
{
    "changeMode": [, 2, 2, , , , , , , ],
    "getMode": [, 2, 2, , [Enums.Mode._helper], , , , , ],
    "notify": [, 2, 2, , , , ,
    [
        Errors.ActionNotPermitted
    ], , ]
});

const iceC_Interfaces_Detector_ids = [
    "::Ice::Object",
    "::Interfaces::Detector",
    "::Interfaces::SmartDevice"
];

Interfaces.Detector = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            Interfaces.SmartDevice
        ];
    }
};

Interfaces.DetectorPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            Interfaces.SmartDevicePrx];
    }
};

Slice.defineOperations(Interfaces.Detector, Interfaces.DetectorPrx, iceC_Interfaces_Detector_ids, 1,
{
    "setSensitivityLevel": [, 2, 2, , , [[3]], ,
    [
        Errors.ActionNotPermitted,
        Errors.SensitivityLevelOutOfRange
    ], , ],
    "getSensitivityLevel": [, 2, 2, , [3], , ,
    [
        Errors.ActionNotPermitted
    ], , ],
    "getLocation": [, 2, 2, , [7], , ,
    [
        Errors.ActionNotPermitted
    ], , ],
    "setLocation": [, 2, 2, , , [[7]], ,
    [
        Errors.ActionNotPermitted
    ], , ]
});

const iceC_Interfaces_LightControl_ids = [
    "::Ice::Object",
    "::Interfaces::LightControl",
    "::Interfaces::SmartDevice"
];

Interfaces.LightControl = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            Interfaces.SmartDevice
        ];
    }
};

Interfaces.LightControlPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            Interfaces.SmartDevicePrx];
    }
};

Slice.defineOperations(Interfaces.LightControl, Interfaces.LightControlPrx, iceC_Interfaces_LightControl_ids, 1,
{
    "turnOn": [, 2, 2, , , , ,
    [
        Errors.ActionNotPermitted
    ], , ],
    "turnOff": [, 2, 2, , , , ,
    [
        Errors.ActionNotPermitted
    ], , ],
    "isOn": [, 2, 2, , [1], , ,
    [
        Errors.ActionNotPermitted
    ], , ]
});

Interfaces.DailySchedule = class
{
    constructor(startHour = 0, endHour = 0)
    {
        this.startHour = startHour;
        this.endHour = endHour;
    }

    _write(ostr)
    {
        ostr.writeInt(this.startHour);
        ostr.writeInt(this.endHour);
    }

    _read(istr)
    {
        this.startHour = istr.readInt();
        this.endHour = istr.readInt();
    }

    static get minWireSize()
    {
        return  8;
    }
};

Slice.defineStruct(Interfaces.DailySchedule, true, false);

let Detectors = _ModuleRegistry.module("Detectors");

const iceC_Detectors_MoveDetector_ids = [
    "::Detectors::MoveDetector",
    "::Ice::Object",
    "::Interfaces::Detector",
    "::Interfaces::SmartDevice"
];

Detectors.MoveDetector = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            Interfaces.SmartDevice,
            Interfaces.Detector
        ];
    }
};

Detectors.MoveDetectorPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            Interfaces.SmartDevicePrx,
            Interfaces.DetectorPrx];
    }
};

Slice.defineOperations(Detectors.MoveDetector, Detectors.MoveDetectorPrx, iceC_Detectors_MoveDetector_ids, 0,
{
    "motionDetected": [, 2, 2, , [1], , ,
    [
        Errors.ActionNotPermitted
    ], , ],
    "activateAlarm": [, 2, 2, , , , ,
    [
        Errors.ActionNotPermitted
    ], , ],
    "deactivateAlarm": [, 2, 2, , , , ,
    [
        Errors.ActionNotPermitted
    ], , ],
    "setAlarm": [, 2, 2, , , [[Interfaces.DailySchedule]], ,
    [
        Errors.ActionNotPermitted
    ], , ],
    "getAlarm": [, 2, 2, , [Interfaces.DailySchedule], , ,
    [
        Errors.ActionNotPermitted
    ], , ]
});

const iceC_Detectors_SmokeDetector_ids = [
    "::Detectors::SmokeDetector",
    "::Ice::Object",
    "::Interfaces::Detector",
    "::Interfaces::SmartDevice"
];

Detectors.SmokeDetector = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            Interfaces.SmartDevice,
            Interfaces.Detector
        ];
    }
};

Detectors.SmokeDetectorPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            Interfaces.SmartDevicePrx,
            Interfaces.DetectorPrx];
    }
};

Slice.defineOperations(Detectors.SmokeDetector, Detectors.SmokeDetectorPrx, iceC_Detectors_SmokeDetector_ids, 0,
{
    "getSmokeDensity": [, 2, 2, , [3], , ,
    [
        Errors.ActionNotPermitted
    ], , ],
    "isSave": [, 2, 2, , [1], , ,
    [
        Errors.ActionNotPermitted
    ], , ]
});

let Lights = _ModuleRegistry.module("Lights");

const iceC_Lights_OutdoorLights_ids = [
    "::Ice::Object",
    "::Interfaces::LightControl",
    "::Interfaces::SmartDevice",
    "::Lights::OutdoorLights"
];

Lights.OutdoorLights = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            Interfaces.LightControl
        ];
    }
};

Lights.OutdoorLightsPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            Interfaces.LightControlPrx];
    }
};

Slice.defineOperations(Lights.OutdoorLights, Lights.OutdoorLightsPrx, iceC_Lights_OutdoorLights_ids, 3,
{
    "adjustBrightness": [, 2, 2, , , [[3]], ,
    [
        Errors.ActionNotPermitted,
        Errors.BrightnessLevelOutOfRange
    ], , ],
    "getBrightnessLevel": [, 2, 2, , [3], , ,
    [
        Errors.ActionNotPermitted
    ], , ]
});

const iceC_Lights_GeneralLights_ids = [
    "::Ice::Object",
    "::Interfaces::LightControl",
    "::Interfaces::SmartDevice",
    "::Lights::GeneralLights"
];

Lights.GeneralLights = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            Interfaces.LightControl
        ];
    }
};

Lights.GeneralLightsPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            Interfaces.LightControlPrx];
    }
};

Slice.defineOperations(Lights.GeneralLights, Lights.GeneralLightsPrx, iceC_Lights_GeneralLights_ids, 3,
{
    "changeColor": [, 2, 2, , , [[7]], ,
    [
        Errors.ActionNotPermitted,
        Errors.UnknownColor
    ], , ],
    "getColor": [, 2, 2, , [7], , ,
    [
        Errors.ActionNotPermitted
    ], , ]
});
export { Enums, Errors, Interfaces, Detectors, Lights };
