//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `SmartHome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "SmartHome.h"
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Errors::ActionNotPermitted> iceC_Errors_ActionNotPermitted_init("::Errors::ActionNotPermitted");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Errors::SensitivityLevelOutOfRange> iceC_Errors_SensitivityLevelOutOfRange_init("::Errors::SensitivityLevelOutOfRange");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Errors::UnknownColor> iceC_Errors_UnknownColor_init("::Errors::UnknownColor");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Errors::BrightnessLevelOutOfRange> iceC_Errors_BrightnessLevelOutOfRange_init("::Errors::BrightnessLevelOutOfRange");

const ::std::string iceC_Interfaces_SmartDevice_ids[2] =
{
    "::Ice::Object",
    "::Interfaces::SmartDevice"
};
const ::std::string iceC_Interfaces_SmartDevice_ops[] =
{
    "changeMode",
    "getMode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "notify"
};
const ::std::string iceC_Interfaces_SmartDevice_changeMode_name = "changeMode";
const ::std::string iceC_Interfaces_SmartDevice_getMode_name = "getMode";
const ::std::string iceC_Interfaces_SmartDevice_notify_name = "notify";

const ::std::string iceC_Interfaces_Detector_ids[3] =
{
    "::Ice::Object",
    "::Interfaces::Detector",
    "::Interfaces::SmartDevice"
};
const ::std::string iceC_Interfaces_Detector_ops[] =
{
    "changeMode",
    "getLocation",
    "getMode",
    "getSensitivityLevel",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "notify",
    "setLocation",
    "setSensitivityLevel"
};
const ::std::string iceC_Interfaces_Detector_setSensitivityLevel_name = "setSensitivityLevel";
const ::std::string iceC_Interfaces_Detector_getSensitivityLevel_name = "getSensitivityLevel";
const ::std::string iceC_Interfaces_Detector_getLocation_name = "getLocation";
const ::std::string iceC_Interfaces_Detector_setLocation_name = "setLocation";

const ::std::string iceC_Interfaces_LightControl_ids[3] =
{
    "::Ice::Object",
    "::Interfaces::LightControl",
    "::Interfaces::SmartDevice"
};
const ::std::string iceC_Interfaces_LightControl_ops[] =
{
    "changeMode",
    "getMode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isOn",
    "notify",
    "turnOff",
    "turnOn"
};
const ::std::string iceC_Interfaces_LightControl_turnOn_name = "turnOn";
const ::std::string iceC_Interfaces_LightControl_turnOff_name = "turnOff";
const ::std::string iceC_Interfaces_LightControl_isOn_name = "isOn";

const ::std::string iceC_Detectors_MoveDetector_ids[4] =
{
    "::Detectors::MoveDetector",
    "::Ice::Object",
    "::Interfaces::Detector",
    "::Interfaces::SmartDevice"
};
const ::std::string iceC_Detectors_MoveDetector_ops[] =
{
    "changeMode",
    "getLocation",
    "getMode",
    "getSensitivityLevel",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "motionDetected",
    "notify",
    "setLocation",
    "setSensitivityLevel"
};
const ::std::string iceC_Detectors_MoveDetector_motionDetected_name = "motionDetected";

const ::std::string iceC_Detectors_SmokeDetector_ids[4] =
{
    "::Detectors::SmokeDetector",
    "::Ice::Object",
    "::Interfaces::Detector",
    "::Interfaces::SmartDevice"
};
const ::std::string iceC_Detectors_SmokeDetector_ops[] =
{
    "changeMode",
    "getLocation",
    "getMode",
    "getSensitivityLevel",
    "getSmokeDensity",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isSave",
    "notify",
    "setLocation",
    "setSensitivityLevel"
};
const ::std::string iceC_Detectors_SmokeDetector_getSmokeDensity_name = "getSmokeDensity";
const ::std::string iceC_Detectors_SmokeDetector_isSave_name = "isSave";

const ::std::string iceC_Lights_OutdoorLights_ids[4] =
{
    "::Ice::Object",
    "::Interfaces::LightControl",
    "::Interfaces::SmartDevice",
    "::Lights::OutdoorLights"
};
const ::std::string iceC_Lights_OutdoorLights_ops[] =
{
    "adjustBrightness",
    "changeMode",
    "getBrightnessLevel",
    "getMode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isOn",
    "notify",
    "turnOff",
    "turnOn"
};
const ::std::string iceC_Lights_OutdoorLights_adjustBrightness_name = "adjustBrightness";
const ::std::string iceC_Lights_OutdoorLights_getBrightnessLevel_name = "getBrightnessLevel";

const ::std::string iceC_Lights_GeneralLights_ids[4] =
{
    "::Ice::Object",
    "::Interfaces::LightControl",
    "::Interfaces::SmartDevice",
    "::Lights::GeneralLights"
};
const ::std::string iceC_Lights_GeneralLights_ops[] =
{
    "changeColor",
    "changeMode",
    "getColor",
    "getMode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isOn",
    "notify",
    "turnOff",
    "turnOn"
};
const ::std::string iceC_Lights_GeneralLights_changeColor_name = "changeColor";
const ::std::string iceC_Lights_GeneralLights_getColor_name = "getColor";

}

Errors::ActionNotPermitted::~ActionNotPermitted()
{
}

const ::std::string&
Errors::ActionNotPermitted::ice_staticId()
{
    static const ::std::string typeId = "::Errors::ActionNotPermitted";
    return typeId;
}

Errors::SensitivityLevelOutOfRange::~SensitivityLevelOutOfRange()
{
}

const ::std::string&
Errors::SensitivityLevelOutOfRange::ice_staticId()
{
    static const ::std::string typeId = "::Errors::SensitivityLevelOutOfRange";
    return typeId;
}

Errors::UnknownColor::~UnknownColor()
{
}

const ::std::string&
Errors::UnknownColor::ice_staticId()
{
    static const ::std::string typeId = "::Errors::UnknownColor";
    return typeId;
}

Errors::BrightnessLevelOutOfRange::~BrightnessLevelOutOfRange()
{
}

const ::std::string&
Errors::BrightnessLevelOutOfRange::ice_staticId()
{
    static const ::std::string typeId = "::Errors::BrightnessLevelOutOfRange";
    return typeId;
}

bool
Interfaces::SmartDevice::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Interfaces_SmartDevice_ids, iceC_Interfaces_SmartDevice_ids + 2, s);
}

::std::vector<::std::string>
Interfaces::SmartDevice::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Interfaces_SmartDevice_ids[0], &iceC_Interfaces_SmartDevice_ids[2]);
}

::std::string
Interfaces::SmartDevice::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Interfaces::SmartDevice::ice_staticId()
{
    static const ::std::string typeId = "::Interfaces::SmartDevice";
    return typeId;
}

/// \cond INTERNAL
bool
Interfaces::SmartDevice::_iceD_changeMode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    this->changeMode(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::SmartDevice::_iceD_getMode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::Enums::Mode ret = this->getMode(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::SmartDevice::_iceD_notify(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    this->notify(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::SmartDevice::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Interfaces_SmartDevice_ops, iceC_Interfaces_SmartDevice_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Interfaces_SmartDevice_ops)
    {
        case 0:
        {
            return _iceD_changeMode(in, current);
        }
        case 1:
        {
            return _iceD_getMode(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_notify(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Interfaces::Detector::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Interfaces_Detector_ids, iceC_Interfaces_Detector_ids + 3, s);
}

::std::vector<::std::string>
Interfaces::Detector::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Interfaces_Detector_ids[0], &iceC_Interfaces_Detector_ids[3]);
}

::std::string
Interfaces::Detector::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Interfaces::Detector::ice_staticId()
{
    static const ::std::string typeId = "::Interfaces::Detector";
    return typeId;
}

/// \cond INTERNAL
bool
Interfaces::Detector::_iceD_setSensitivityLevel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    int iceP_level;
    istr->readAll(iceP_level);
    inS.endReadParams();
    this->setSensitivityLevel(iceP_level, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::Detector::_iceD_getSensitivityLevel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    int ret = this->getSensitivityLevel(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::Detector::_iceD_getLocation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getLocation(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::Detector::_iceD_setLocation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_location;
    istr->readAll(iceP_location);
    inS.endReadParams();
    this->setLocation(::std::move(iceP_location), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::Detector::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Interfaces_Detector_ops, iceC_Interfaces_Detector_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Interfaces_Detector_ops)
    {
        case 0:
        {
            return _iceD_changeMode(in, current);
        }
        case 1:
        {
            return _iceD_getLocation(in, current);
        }
        case 2:
        {
            return _iceD_getMode(in, current);
        }
        case 3:
        {
            return _iceD_getSensitivityLevel(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_notify(in, current);
        }
        case 9:
        {
            return _iceD_setLocation(in, current);
        }
        case 10:
        {
            return _iceD_setSensitivityLevel(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Interfaces::LightControl::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Interfaces_LightControl_ids, iceC_Interfaces_LightControl_ids + 3, s);
}

::std::vector<::std::string>
Interfaces::LightControl::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Interfaces_LightControl_ids[0], &iceC_Interfaces_LightControl_ids[3]);
}

::std::string
Interfaces::LightControl::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Interfaces::LightControl::ice_staticId()
{
    static const ::std::string typeId = "::Interfaces::LightControl";
    return typeId;
}

/// \cond INTERNAL
bool
Interfaces::LightControl::_iceD_turnOn(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    this->turnOn(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::LightControl::_iceD_turnOff(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    this->turnOff(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::LightControl::_iceD_isOn(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    bool ret = this->isOn(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::LightControl::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Interfaces_LightControl_ops, iceC_Interfaces_LightControl_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Interfaces_LightControl_ops)
    {
        case 0:
        {
            return _iceD_changeMode(in, current);
        }
        case 1:
        {
            return _iceD_getMode(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_isOn(in, current);
        }
        case 7:
        {
            return _iceD_notify(in, current);
        }
        case 8:
        {
            return _iceD_turnOff(in, current);
        }
        case 9:
        {
            return _iceD_turnOn(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Detectors::MoveDetector::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Detectors_MoveDetector_ids, iceC_Detectors_MoveDetector_ids + 4, s);
}

::std::vector<::std::string>
Detectors::MoveDetector::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Detectors_MoveDetector_ids[0], &iceC_Detectors_MoveDetector_ids[4]);
}

::std::string
Detectors::MoveDetector::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Detectors::MoveDetector::ice_staticId()
{
    static const ::std::string typeId = "::Detectors::MoveDetector";
    return typeId;
}

/// \cond INTERNAL
bool
Detectors::MoveDetector::_iceD_motionDetected(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    bool ret = this->motionDetected(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Detectors::MoveDetector::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Detectors_MoveDetector_ops, iceC_Detectors_MoveDetector_ops + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Detectors_MoveDetector_ops)
    {
        case 0:
        {
            return _iceD_changeMode(in, current);
        }
        case 1:
        {
            return _iceD_getLocation(in, current);
        }
        case 2:
        {
            return _iceD_getMode(in, current);
        }
        case 3:
        {
            return _iceD_getSensitivityLevel(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_motionDetected(in, current);
        }
        case 9:
        {
            return _iceD_notify(in, current);
        }
        case 10:
        {
            return _iceD_setLocation(in, current);
        }
        case 11:
        {
            return _iceD_setSensitivityLevel(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Detectors::SmokeDetector::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Detectors_SmokeDetector_ids, iceC_Detectors_SmokeDetector_ids + 4, s);
}

::std::vector<::std::string>
Detectors::SmokeDetector::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Detectors_SmokeDetector_ids[0], &iceC_Detectors_SmokeDetector_ids[4]);
}

::std::string
Detectors::SmokeDetector::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Detectors::SmokeDetector::ice_staticId()
{
    static const ::std::string typeId = "::Detectors::SmokeDetector";
    return typeId;
}

/// \cond INTERNAL
bool
Detectors::SmokeDetector::_iceD_getSmokeDensity(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    int ret = this->getSmokeDensity(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Detectors::SmokeDetector::_iceD_isSave(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    bool ret = this->isSave(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Detectors::SmokeDetector::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Detectors_SmokeDetector_ops, iceC_Detectors_SmokeDetector_ops + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Detectors_SmokeDetector_ops)
    {
        case 0:
        {
            return _iceD_changeMode(in, current);
        }
        case 1:
        {
            return _iceD_getLocation(in, current);
        }
        case 2:
        {
            return _iceD_getMode(in, current);
        }
        case 3:
        {
            return _iceD_getSensitivityLevel(in, current);
        }
        case 4:
        {
            return _iceD_getSmokeDensity(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        case 9:
        {
            return _iceD_isSave(in, current);
        }
        case 10:
        {
            return _iceD_notify(in, current);
        }
        case 11:
        {
            return _iceD_setLocation(in, current);
        }
        case 12:
        {
            return _iceD_setSensitivityLevel(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Lights::OutdoorLights::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Lights_OutdoorLights_ids, iceC_Lights_OutdoorLights_ids + 4, s);
}

::std::vector<::std::string>
Lights::OutdoorLights::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Lights_OutdoorLights_ids[0], &iceC_Lights_OutdoorLights_ids[4]);
}

::std::string
Lights::OutdoorLights::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Lights::OutdoorLights::ice_staticId()
{
    static const ::std::string typeId = "::Lights::OutdoorLights";
    return typeId;
}

/// \cond INTERNAL
bool
Lights::OutdoorLights::_iceD_adjustBrightness(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    int iceP_level;
    istr->readAll(iceP_level);
    inS.endReadParams();
    this->adjustBrightness(iceP_level, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Lights::OutdoorLights::_iceD_getBrightnessLevel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    int ret = this->getBrightnessLevel(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Lights::OutdoorLights::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Lights_OutdoorLights_ops, iceC_Lights_OutdoorLights_ops + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Lights_OutdoorLights_ops)
    {
        case 0:
        {
            return _iceD_adjustBrightness(in, current);
        }
        case 1:
        {
            return _iceD_changeMode(in, current);
        }
        case 2:
        {
            return _iceD_getBrightnessLevel(in, current);
        }
        case 3:
        {
            return _iceD_getMode(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_isOn(in, current);
        }
        case 9:
        {
            return _iceD_notify(in, current);
        }
        case 10:
        {
            return _iceD_turnOff(in, current);
        }
        case 11:
        {
            return _iceD_turnOn(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Lights::GeneralLights::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Lights_GeneralLights_ids, iceC_Lights_GeneralLights_ids + 4, s);
}

::std::vector<::std::string>
Lights::GeneralLights::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Lights_GeneralLights_ids[0], &iceC_Lights_GeneralLights_ids[4]);
}

::std::string
Lights::GeneralLights::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Lights::GeneralLights::ice_staticId()
{
    static const ::std::string typeId = "::Lights::GeneralLights";
    return typeId;
}

/// \cond INTERNAL
bool
Lights::GeneralLights::_iceD_changeColor(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_color;
    istr->readAll(iceP_color);
    inS.endReadParams();
    this->changeColor(::std::move(iceP_color), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Lights::GeneralLights::_iceD_getColor(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getColor(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Lights::GeneralLights::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Lights_GeneralLights_ops, iceC_Lights_GeneralLights_ops + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Lights_GeneralLights_ops)
    {
        case 0:
        {
            return _iceD_changeColor(in, current);
        }
        case 1:
        {
            return _iceD_changeMode(in, current);
        }
        case 2:
        {
            return _iceD_getColor(in, current);
        }
        case 3:
        {
            return _iceD_getMode(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_isOn(in, current);
        }
        case 9:
        {
            return _iceD_notify(in, current);
        }
        case 10:
        {
            return _iceD_turnOff(in, current);
        }
        case 11:
        {
            return _iceD_turnOn(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Interfaces::SmartDevicePrx::_iceI_changeMode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Interfaces_SmartDevice_changeMode_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Interfaces::SmartDevicePrx::_iceI_getMode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Enums::Mode>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Interfaces_SmartDevice_getMode_name);
    outAsync->invoke(iceC_Interfaces_SmartDevice_getMode_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Interfaces::SmartDevicePrx::_iceI_notify(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Interfaces_SmartDevice_notify_name);
    outAsync->invoke(iceC_Interfaces_SmartDevice_notify_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Interfaces::SmartDevicePrx::_newInstance() const
{
    return ::IceInternal::createProxy<SmartDevicePrx>();
}
/// \endcond

const ::std::string&
Interfaces::SmartDevicePrx::ice_staticId()
{
    return SmartDevice::ice_staticId();
}

/// \cond INTERNAL
void
Interfaces::DetectorPrx::_iceI_setSensitivityLevel(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_level, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Interfaces_Detector_setSensitivityLevel_name);
    outAsync->invoke(iceC_Interfaces_Detector_setSensitivityLevel_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_level);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Errors::SensitivityLevelOutOfRange&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Interfaces::DetectorPrx::_iceI_getSensitivityLevel(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Interfaces_Detector_getSensitivityLevel_name);
    outAsync->invoke(iceC_Interfaces_Detector_getSensitivityLevel_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Interfaces::DetectorPrx::_iceI_getLocation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Interfaces_Detector_getLocation_name);
    outAsync->invoke(iceC_Interfaces_Detector_getLocation_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Interfaces::DetectorPrx::_iceI_setLocation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_location, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Interfaces_Detector_setLocation_name);
    outAsync->invoke(iceC_Interfaces_Detector_setLocation_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_location);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Interfaces::DetectorPrx::_newInstance() const
{
    return ::IceInternal::createProxy<DetectorPrx>();
}
/// \endcond

const ::std::string&
Interfaces::DetectorPrx::ice_staticId()
{
    return Detector::ice_staticId();
}

/// \cond INTERNAL
void
Interfaces::LightControlPrx::_iceI_turnOn(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Interfaces_LightControl_turnOn_name);
    outAsync->invoke(iceC_Interfaces_LightControl_turnOn_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Interfaces::LightControlPrx::_iceI_turnOff(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Interfaces_LightControl_turnOff_name);
    outAsync->invoke(iceC_Interfaces_LightControl_turnOff_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Interfaces::LightControlPrx::_iceI_isOn(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Interfaces_LightControl_isOn_name);
    outAsync->invoke(iceC_Interfaces_LightControl_isOn_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Interfaces::LightControlPrx::_newInstance() const
{
    return ::IceInternal::createProxy<LightControlPrx>();
}
/// \endcond

const ::std::string&
Interfaces::LightControlPrx::ice_staticId()
{
    return LightControl::ice_staticId();
}

/// \cond INTERNAL
void
Detectors::MoveDetectorPrx::_iceI_motionDetected(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Detectors_MoveDetector_motionDetected_name);
    outAsync->invoke(iceC_Detectors_MoveDetector_motionDetected_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Detectors::MoveDetectorPrx::_newInstance() const
{
    return ::IceInternal::createProxy<MoveDetectorPrx>();
}
/// \endcond

const ::std::string&
Detectors::MoveDetectorPrx::ice_staticId()
{
    return MoveDetector::ice_staticId();
}

/// \cond INTERNAL
void
Detectors::SmokeDetectorPrx::_iceI_getSmokeDensity(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Detectors_SmokeDetector_getSmokeDensity_name);
    outAsync->invoke(iceC_Detectors_SmokeDetector_getSmokeDensity_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Detectors::SmokeDetectorPrx::_iceI_isSave(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Detectors_SmokeDetector_isSave_name);
    outAsync->invoke(iceC_Detectors_SmokeDetector_isSave_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Detectors::SmokeDetectorPrx::_newInstance() const
{
    return ::IceInternal::createProxy<SmokeDetectorPrx>();
}
/// \endcond

const ::std::string&
Detectors::SmokeDetectorPrx::ice_staticId()
{
    return SmokeDetector::ice_staticId();
}

/// \cond INTERNAL
void
Lights::OutdoorLightsPrx::_iceI_adjustBrightness(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_level, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Lights_OutdoorLights_adjustBrightness_name);
    outAsync->invoke(iceC_Lights_OutdoorLights_adjustBrightness_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_level);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Errors::BrightnessLevelOutOfRange&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Lights::OutdoorLightsPrx::_iceI_getBrightnessLevel(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Lights_OutdoorLights_getBrightnessLevel_name);
    outAsync->invoke(iceC_Lights_OutdoorLights_getBrightnessLevel_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Lights::OutdoorLightsPrx::_newInstance() const
{
    return ::IceInternal::createProxy<OutdoorLightsPrx>();
}
/// \endcond

const ::std::string&
Lights::OutdoorLightsPrx::ice_staticId()
{
    return OutdoorLights::ice_staticId();
}

/// \cond INTERNAL
void
Lights::GeneralLightsPrx::_iceI_changeColor(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_color, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Lights_GeneralLights_changeColor_name);
    outAsync->invoke(iceC_Lights_GeneralLights_changeColor_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_color);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Errors::UnknownColor&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Lights::GeneralLightsPrx::_iceI_getColor(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Lights_GeneralLights_getColor_name);
    outAsync->invoke(iceC_Lights_GeneralLights_getColor_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Errors::ActionNotPermitted&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Lights::GeneralLightsPrx::_newInstance() const
{
    return ::IceInternal::createProxy<GeneralLightsPrx>();
}
/// \endcond

const ::std::string&
Lights::GeneralLightsPrx::ice_staticId()
{
    return GeneralLights::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Interfaces_SmartDevice_changeMode_name = "changeMode";

const ::std::string iceC_Interfaces_SmartDevice_getMode_name = "getMode";

const ::std::string iceC_Interfaces_SmartDevice_notify_name = "notify";

const ::std::string iceC_Interfaces_Detector_setSensitivityLevel_name = "setSensitivityLevel";

const ::std::string iceC_Interfaces_Detector_getSensitivityLevel_name = "getSensitivityLevel";

const ::std::string iceC_Interfaces_Detector_getLocation_name = "getLocation";

const ::std::string iceC_Interfaces_Detector_setLocation_name = "setLocation";

const ::std::string iceC_Interfaces_LightControl_turnOn_name = "turnOn";

const ::std::string iceC_Interfaces_LightControl_turnOff_name = "turnOff";

const ::std::string iceC_Interfaces_LightControl_isOn_name = "isOn";

}

namespace
{

const ::std::string iceC_Detectors_MoveDetector_motionDetected_name = "motionDetected";

const ::std::string iceC_Detectors_SmokeDetector_getSmokeDensity_name = "getSmokeDensity";

const ::std::string iceC_Detectors_SmokeDetector_isSave_name = "isSave";

}

namespace
{

const ::std::string iceC_Lights_OutdoorLights_adjustBrightness_name = "adjustBrightness";

const ::std::string iceC_Lights_OutdoorLights_getBrightnessLevel_name = "getBrightnessLevel";

const ::std::string iceC_Lights_GeneralLights_changeColor_name = "changeColor";

const ::std::string iceC_Lights_GeneralLights_getColor_name = "getColor";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Errors::ActionNotPermitted> iceC_Errors_ActionNotPermitted_init("::Errors::ActionNotPermitted");

}

#ifdef ICE_CPP11_COMPILER
Errors::ActionNotPermitted::~ActionNotPermitted()
{
}
#else
Errors::ActionNotPermitted::~ActionNotPermitted() throw()
{
}
#endif

::std::string
Errors::ActionNotPermitted::ice_id() const
{
    return "::Errors::ActionNotPermitted";
}

Errors::ActionNotPermitted*
Errors::ActionNotPermitted::ice_clone() const
{
    return new ActionNotPermitted(*this);
}

void
Errors::ActionNotPermitted::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Errors::ActionNotPermitted::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Errors::ActionNotPermitted", -1, true);
    ::Ice::StreamWriter< ActionNotPermitted, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Errors::ActionNotPermitted::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ActionNotPermitted, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Errors::SensitivityLevelOutOfRange> iceC_Errors_SensitivityLevelOutOfRange_init("::Errors::SensitivityLevelOutOfRange");

}

#ifdef ICE_CPP11_COMPILER
Errors::SensitivityLevelOutOfRange::~SensitivityLevelOutOfRange()
{
}
#else
Errors::SensitivityLevelOutOfRange::~SensitivityLevelOutOfRange() throw()
{
}
#endif

::std::string
Errors::SensitivityLevelOutOfRange::ice_id() const
{
    return "::Errors::SensitivityLevelOutOfRange";
}

Errors::SensitivityLevelOutOfRange*
Errors::SensitivityLevelOutOfRange::ice_clone() const
{
    return new SensitivityLevelOutOfRange(*this);
}

void
Errors::SensitivityLevelOutOfRange::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Errors::SensitivityLevelOutOfRange::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Errors::SensitivityLevelOutOfRange", -1, true);
    ::Ice::StreamWriter< SensitivityLevelOutOfRange, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Errors::SensitivityLevelOutOfRange::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< SensitivityLevelOutOfRange, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Errors::UnknownColor> iceC_Errors_UnknownColor_init("::Errors::UnknownColor");

}

#ifdef ICE_CPP11_COMPILER
Errors::UnknownColor::~UnknownColor()
{
}
#else
Errors::UnknownColor::~UnknownColor() throw()
{
}
#endif

::std::string
Errors::UnknownColor::ice_id() const
{
    return "::Errors::UnknownColor";
}

Errors::UnknownColor*
Errors::UnknownColor::ice_clone() const
{
    return new UnknownColor(*this);
}

void
Errors::UnknownColor::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Errors::UnknownColor::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Errors::UnknownColor", -1, true);
    ::Ice::StreamWriter< UnknownColor, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Errors::UnknownColor::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UnknownColor, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Errors::BrightnessLevelOutOfRange> iceC_Errors_BrightnessLevelOutOfRange_init("::Errors::BrightnessLevelOutOfRange");

}

#ifdef ICE_CPP11_COMPILER
Errors::BrightnessLevelOutOfRange::~BrightnessLevelOutOfRange()
{
}
#else
Errors::BrightnessLevelOutOfRange::~BrightnessLevelOutOfRange() throw()
{
}
#endif

::std::string
Errors::BrightnessLevelOutOfRange::ice_id() const
{
    return "::Errors::BrightnessLevelOutOfRange";
}

Errors::BrightnessLevelOutOfRange*
Errors::BrightnessLevelOutOfRange::ice_clone() const
{
    return new BrightnessLevelOutOfRange(*this);
}

void
Errors::BrightnessLevelOutOfRange::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Errors::BrightnessLevelOutOfRange::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Errors::BrightnessLevelOutOfRange", -1, true);
    ::Ice::StreamWriter< BrightnessLevelOutOfRange, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Errors::BrightnessLevelOutOfRange::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< BrightnessLevelOutOfRange, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Interfaces::upCast(SmartDevice* p) { return p; }

void
::IceProxy::Interfaces::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< SmartDevice>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new SmartDevice;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Interfaces::SmartDevice::_iceI_begin_changeMode(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Interfaces_SmartDevice_changeMode_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Interfaces_SmartDevice_changeMode_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Interfaces_SmartDevice_changeMode_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Interfaces::SmartDevice::end_changeMode(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Interfaces_SmartDevice_changeMode_name);
}

::Ice::AsyncResultPtr
IceProxy::Interfaces::SmartDevice::_iceI_begin_getMode(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Interfaces_SmartDevice_getMode_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Interfaces_SmartDevice_getMode_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Interfaces_SmartDevice_getMode_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Interfaces_SmartDevice_getMode_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Enums::Mode
IceProxy::Interfaces::SmartDevice::end_getMode(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Interfaces_SmartDevice_getMode_name);
    ::Enums::Mode ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Interfaces::SmartDevice::_iceI_begin_notify(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Interfaces_SmartDevice_notify_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Interfaces_SmartDevice_notify_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Interfaces_SmartDevice_notify_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Interfaces_SmartDevice_notify_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Interfaces::SmartDevice::end_notify(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Interfaces_SmartDevice_notify_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Interfaces::SmartDevice::_newInstance() const
{
    return new SmartDevice;
}
/// \endcond

const ::std::string&
IceProxy::Interfaces::SmartDevice::ice_staticId()
{
    return ::Interfaces::SmartDevice::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Interfaces::upCast(Detector* p) { return p; }

void
::IceProxy::Interfaces::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Detector>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Detector;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Interfaces::Detector::_iceI_begin_setSensitivityLevel(::Ice::Int iceP_level, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Interfaces_Detector_setSensitivityLevel_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Interfaces_Detector_setSensitivityLevel_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Interfaces_Detector_setSensitivityLevel_name, ::Ice::Idempotent, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_level);
        result->endWriteParams();
        result->invoke(iceC_Interfaces_Detector_setSensitivityLevel_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Interfaces::Detector::end_setSensitivityLevel(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Interfaces_Detector_setSensitivityLevel_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Errors::SensitivityLevelOutOfRange&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Interfaces::Detector::_iceI_begin_getSensitivityLevel(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Interfaces_Detector_getSensitivityLevel_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Interfaces_Detector_getSensitivityLevel_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Interfaces_Detector_getSensitivityLevel_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Interfaces_Detector_getSensitivityLevel_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Interfaces::Detector::end_getSensitivityLevel(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Interfaces_Detector_getSensitivityLevel_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Interfaces::Detector::_iceI_begin_getLocation(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Interfaces_Detector_getLocation_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Interfaces_Detector_getLocation_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Interfaces_Detector_getLocation_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Interfaces_Detector_getLocation_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Interfaces::Detector::end_getLocation(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Interfaces_Detector_getLocation_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Interfaces::Detector::_iceI_begin_setLocation(const ::std::string& iceP_location, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Interfaces_Detector_setLocation_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Interfaces_Detector_setLocation_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Interfaces_Detector_setLocation_name, ::Ice::Idempotent, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_location);
        result->endWriteParams();
        result->invoke(iceC_Interfaces_Detector_setLocation_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Interfaces::Detector::end_setLocation(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Interfaces_Detector_setLocation_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Interfaces::Detector::_newInstance() const
{
    return new Detector;
}
/// \endcond

const ::std::string&
IceProxy::Interfaces::Detector::ice_staticId()
{
    return ::Interfaces::Detector::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Interfaces::upCast(LightControl* p) { return p; }

void
::IceProxy::Interfaces::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< LightControl>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new LightControl;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Interfaces::LightControl::_iceI_begin_turnOn(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Interfaces_LightControl_turnOn_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Interfaces_LightControl_turnOn_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Interfaces_LightControl_turnOn_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Interfaces_LightControl_turnOn_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Interfaces::LightControl::end_turnOn(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Interfaces_LightControl_turnOn_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Interfaces::LightControl::_iceI_begin_turnOff(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Interfaces_LightControl_turnOff_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Interfaces_LightControl_turnOff_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Interfaces_LightControl_turnOff_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Interfaces_LightControl_turnOff_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Interfaces::LightControl::end_turnOff(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Interfaces_LightControl_turnOff_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Interfaces::LightControl::_iceI_begin_isOn(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Interfaces_LightControl_isOn_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Interfaces_LightControl_isOn_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Interfaces_LightControl_isOn_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Interfaces_LightControl_isOn_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Interfaces::LightControl::end_isOn(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Interfaces_LightControl_isOn_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Interfaces::LightControl::_newInstance() const
{
    return new LightControl;
}
/// \endcond

const ::std::string&
IceProxy::Interfaces::LightControl::ice_staticId()
{
    return ::Interfaces::LightControl::ice_staticId();
}

::IceProxy::Detectors::_MoveDetectorBase::~_MoveDetectorBase()
{
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Detectors::upCast(MoveDetector* p) { return p; }

void
::IceProxy::Detectors::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< MoveDetector>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new MoveDetector;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Detectors::MoveDetector::_iceI_begin_motionDetected(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Detectors_MoveDetector_motionDetected_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Detectors_MoveDetector_motionDetected_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Detectors_MoveDetector_motionDetected_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Detectors_MoveDetector_motionDetected_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Detectors::MoveDetector::end_motionDetected(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Detectors_MoveDetector_motionDetected_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Detectors::MoveDetector::_newInstance() const
{
    return new MoveDetector;
}
/// \endcond

const ::std::string&
IceProxy::Detectors::MoveDetector::ice_staticId()
{
    return ::Detectors::MoveDetector::ice_staticId();
}

::IceProxy::Detectors::_SmokeDetectorBase::~_SmokeDetectorBase()
{
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Detectors::upCast(SmokeDetector* p) { return p; }

void
::IceProxy::Detectors::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< SmokeDetector>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new SmokeDetector;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Detectors::SmokeDetector::_iceI_begin_getSmokeDensity(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Detectors_SmokeDetector_getSmokeDensity_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Detectors_SmokeDetector_getSmokeDensity_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Detectors_SmokeDetector_getSmokeDensity_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Detectors_SmokeDetector_getSmokeDensity_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Detectors::SmokeDetector::end_getSmokeDensity(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Detectors_SmokeDetector_getSmokeDensity_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Detectors::SmokeDetector::_iceI_begin_isSave(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Detectors_SmokeDetector_isSave_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Detectors_SmokeDetector_isSave_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Detectors_SmokeDetector_isSave_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Detectors_SmokeDetector_isSave_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Detectors::SmokeDetector::end_isSave(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Detectors_SmokeDetector_isSave_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Detectors::SmokeDetector::_newInstance() const
{
    return new SmokeDetector;
}
/// \endcond

const ::std::string&
IceProxy::Detectors::SmokeDetector::ice_staticId()
{
    return ::Detectors::SmokeDetector::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Lights::upCast(OutdoorLights* p) { return p; }

void
::IceProxy::Lights::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< OutdoorLights>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new OutdoorLights;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Lights::OutdoorLights::_iceI_begin_adjustBrightness(::Ice::Int iceP_level, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Lights_OutdoorLights_adjustBrightness_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Lights_OutdoorLights_adjustBrightness_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Lights_OutdoorLights_adjustBrightness_name, ::Ice::Idempotent, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_level);
        result->endWriteParams();
        result->invoke(iceC_Lights_OutdoorLights_adjustBrightness_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Lights::OutdoorLights::end_adjustBrightness(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Lights_OutdoorLights_adjustBrightness_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Errors::BrightnessLevelOutOfRange&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Lights::OutdoorLights::_iceI_begin_getBrightnessLevel(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Lights_OutdoorLights_getBrightnessLevel_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Lights_OutdoorLights_getBrightnessLevel_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Lights_OutdoorLights_getBrightnessLevel_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Lights_OutdoorLights_getBrightnessLevel_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Lights::OutdoorLights::end_getBrightnessLevel(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Lights_OutdoorLights_getBrightnessLevel_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Lights::OutdoorLights::_newInstance() const
{
    return new OutdoorLights;
}
/// \endcond

const ::std::string&
IceProxy::Lights::OutdoorLights::ice_staticId()
{
    return ::Lights::OutdoorLights::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Lights::upCast(GeneralLights* p) { return p; }

void
::IceProxy::Lights::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< GeneralLights>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new GeneralLights;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Lights::GeneralLights::_iceI_begin_changeColor(const ::std::string& iceP_color, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Lights_GeneralLights_changeColor_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Lights_GeneralLights_changeColor_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Lights_GeneralLights_changeColor_name, ::Ice::Idempotent, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_color);
        result->endWriteParams();
        result->invoke(iceC_Lights_GeneralLights_changeColor_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Lights::GeneralLights::end_changeColor(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Lights_GeneralLights_changeColor_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Errors::UnknownColor&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Lights::GeneralLights::_iceI_begin_getColor(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Lights_GeneralLights_getColor_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Lights_GeneralLights_getColor_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Lights_GeneralLights_getColor_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Lights_GeneralLights_getColor_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Lights::GeneralLights::end_getColor(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Lights_GeneralLights_getColor_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Errors::ActionNotPermitted&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Lights::GeneralLights::_newInstance() const
{
    return new GeneralLights;
}
/// \endcond

const ::std::string&
IceProxy::Lights::GeneralLights::ice_staticId()
{
    return ::Lights::GeneralLights::ice_staticId();
}

Interfaces::SmartDevice::~SmartDevice()
{
}

/// \cond INTERNAL
::Ice::Object* Interfaces::upCast(SmartDevice* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Interfaces_SmartDevice_ids[2] =
{
    "::Ice::Object",
    "::Interfaces::SmartDevice"
};

}

bool
Interfaces::SmartDevice::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Interfaces_SmartDevice_ids, iceC_Interfaces_SmartDevice_ids + 2, s);
}

::std::vector< ::std::string>
Interfaces::SmartDevice::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Interfaces_SmartDevice_ids[0], &iceC_Interfaces_SmartDevice_ids[2]);
}

const ::std::string&
Interfaces::SmartDevice::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Interfaces::SmartDevice::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Interfaces::SmartDevice";
    return typeId;
#else
    return iceC_Interfaces_SmartDevice_ids[1];
#endif
}

/// \cond INTERNAL
bool
Interfaces::SmartDevice::_iceD_changeMode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    this->changeMode(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::SmartDevice::_iceD_getMode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ::Enums::Mode ret = this->getMode(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::SmartDevice::_iceD_notify(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    this->notify(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Interfaces_SmartDevice_all[] =
{
    "changeMode",
    "getMode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "notify"
};

}

/// \cond INTERNAL
bool
Interfaces::SmartDevice::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Interfaces_SmartDevice_all, iceC_Interfaces_SmartDevice_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Interfaces_SmartDevice_all)
    {
        case 0:
        {
            return _iceD_changeMode(in, current);
        }
        case 1:
        {
            return _iceD_getMode(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_notify(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Interfaces::SmartDevice::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< SmartDevice, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Interfaces::SmartDevice::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< SmartDevice, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Interfaces::_icePatchObjectPtr(SmartDevicePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = SmartDevicePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(SmartDevice::ice_staticId(), v);
    }
}
/// \endcond

Interfaces::Detector::~Detector()
{
}

/// \cond INTERNAL
::Ice::Object* Interfaces::upCast(Detector* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Interfaces_Detector_ids[3] =
{
    "::Ice::Object",
    "::Interfaces::Detector",
    "::Interfaces::SmartDevice"
};

}

bool
Interfaces::Detector::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Interfaces_Detector_ids, iceC_Interfaces_Detector_ids + 3, s);
}

::std::vector< ::std::string>
Interfaces::Detector::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Interfaces_Detector_ids[0], &iceC_Interfaces_Detector_ids[3]);
}

const ::std::string&
Interfaces::Detector::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Interfaces::Detector::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Interfaces::Detector";
    return typeId;
#else
    return iceC_Interfaces_Detector_ids[1];
#endif
}

/// \cond INTERNAL
bool
Interfaces::Detector::_iceD_setSensitivityLevel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_level;
    istr->read(iceP_level);
    inS.endReadParams();
    this->setSensitivityLevel(iceP_level, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::Detector::_iceD_getSensitivityLevel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getSensitivityLevel(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::Detector::_iceD_getLocation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getLocation(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::Detector::_iceD_setLocation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_location;
    istr->read(iceP_location);
    inS.endReadParams();
    this->setLocation(iceP_location, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Interfaces_Detector_all[] =
{
    "changeMode",
    "getLocation",
    "getMode",
    "getSensitivityLevel",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "notify",
    "setLocation",
    "setSensitivityLevel"
};

}

/// \cond INTERNAL
bool
Interfaces::Detector::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Interfaces_Detector_all, iceC_Interfaces_Detector_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Interfaces_Detector_all)
    {
        case 0:
        {
            return _iceD_changeMode(in, current);
        }
        case 1:
        {
            return _iceD_getLocation(in, current);
        }
        case 2:
        {
            return _iceD_getMode(in, current);
        }
        case 3:
        {
            return _iceD_getSensitivityLevel(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_notify(in, current);
        }
        case 9:
        {
            return _iceD_setLocation(in, current);
        }
        case 10:
        {
            return _iceD_setSensitivityLevel(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Interfaces::Detector::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Detector, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Interfaces::Detector::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Detector, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Interfaces::_icePatchObjectPtr(DetectorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DetectorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Detector::ice_staticId(), v);
    }
}
/// \endcond

Interfaces::LightControl::~LightControl()
{
}

/// \cond INTERNAL
::Ice::Object* Interfaces::upCast(LightControl* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Interfaces_LightControl_ids[3] =
{
    "::Ice::Object",
    "::Interfaces::LightControl",
    "::Interfaces::SmartDevice"
};

}

bool
Interfaces::LightControl::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Interfaces_LightControl_ids, iceC_Interfaces_LightControl_ids + 3, s);
}

::std::vector< ::std::string>
Interfaces::LightControl::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Interfaces_LightControl_ids[0], &iceC_Interfaces_LightControl_ids[3]);
}

const ::std::string&
Interfaces::LightControl::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Interfaces::LightControl::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Interfaces::LightControl";
    return typeId;
#else
    return iceC_Interfaces_LightControl_ids[1];
#endif
}

/// \cond INTERNAL
bool
Interfaces::LightControl::_iceD_turnOn(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    this->turnOn(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::LightControl::_iceD_turnOff(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    this->turnOff(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Interfaces::LightControl::_iceD_isOn(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    bool ret = this->isOn(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Interfaces_LightControl_all[] =
{
    "changeMode",
    "getMode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isOn",
    "notify",
    "turnOff",
    "turnOn"
};

}

/// \cond INTERNAL
bool
Interfaces::LightControl::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Interfaces_LightControl_all, iceC_Interfaces_LightControl_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Interfaces_LightControl_all)
    {
        case 0:
        {
            return _iceD_changeMode(in, current);
        }
        case 1:
        {
            return _iceD_getMode(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_isOn(in, current);
        }
        case 7:
        {
            return _iceD_notify(in, current);
        }
        case 8:
        {
            return _iceD_turnOff(in, current);
        }
        case 9:
        {
            return _iceD_turnOn(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Interfaces::LightControl::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< LightControl, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Interfaces::LightControl::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< LightControl, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Interfaces::_icePatchObjectPtr(LightControlPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = LightControlPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(LightControl::ice_staticId(), v);
    }
}
/// \endcond

Detectors::MoveDetector::~MoveDetector()
{
}

/// \cond INTERNAL
::Ice::Object* Detectors::upCast(MoveDetector* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Detectors_MoveDetector_ids[4] =
{
    "::Detectors::MoveDetector",
    "::Ice::Object",
    "::Interfaces::Detector",
    "::Interfaces::SmartDevice"
};

}

bool
Detectors::MoveDetector::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Detectors_MoveDetector_ids, iceC_Detectors_MoveDetector_ids + 4, s);
}

::std::vector< ::std::string>
Detectors::MoveDetector::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Detectors_MoveDetector_ids[0], &iceC_Detectors_MoveDetector_ids[4]);
}

const ::std::string&
Detectors::MoveDetector::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Detectors::MoveDetector::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Detectors::MoveDetector";
    return typeId;
#else
    return iceC_Detectors_MoveDetector_ids[0];
#endif
}

/// \cond INTERNAL
bool
Detectors::MoveDetector::_iceD_motionDetected(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    bool ret = this->motionDetected(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Detectors_MoveDetector_all[] =
{
    "changeMode",
    "getLocation",
    "getMode",
    "getSensitivityLevel",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "motionDetected",
    "notify",
    "setLocation",
    "setSensitivityLevel"
};

}

/// \cond INTERNAL
bool
Detectors::MoveDetector::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Detectors_MoveDetector_all, iceC_Detectors_MoveDetector_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Detectors_MoveDetector_all)
    {
        case 0:
        {
            return _iceD_changeMode(in, current);
        }
        case 1:
        {
            return _iceD_getLocation(in, current);
        }
        case 2:
        {
            return _iceD_getMode(in, current);
        }
        case 3:
        {
            return _iceD_getSensitivityLevel(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_motionDetected(in, current);
        }
        case 9:
        {
            return _iceD_notify(in, current);
        }
        case 10:
        {
            return _iceD_setLocation(in, current);
        }
        case 11:
        {
            return _iceD_setSensitivityLevel(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Detectors::MoveDetector::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< MoveDetector, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Detectors::MoveDetector::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< MoveDetector, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Detectors::_icePatchObjectPtr(MoveDetectorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = MoveDetectorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(MoveDetector::ice_staticId(), v);
    }
}
/// \endcond

Detectors::SmokeDetector::~SmokeDetector()
{
}

/// \cond INTERNAL
::Ice::Object* Detectors::upCast(SmokeDetector* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Detectors_SmokeDetector_ids[4] =
{
    "::Detectors::SmokeDetector",
    "::Ice::Object",
    "::Interfaces::Detector",
    "::Interfaces::SmartDevice"
};

}

bool
Detectors::SmokeDetector::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Detectors_SmokeDetector_ids, iceC_Detectors_SmokeDetector_ids + 4, s);
}

::std::vector< ::std::string>
Detectors::SmokeDetector::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Detectors_SmokeDetector_ids[0], &iceC_Detectors_SmokeDetector_ids[4]);
}

const ::std::string&
Detectors::SmokeDetector::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Detectors::SmokeDetector::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Detectors::SmokeDetector";
    return typeId;
#else
    return iceC_Detectors_SmokeDetector_ids[0];
#endif
}

/// \cond INTERNAL
bool
Detectors::SmokeDetector::_iceD_getSmokeDensity(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getSmokeDensity(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Detectors::SmokeDetector::_iceD_isSave(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    bool ret = this->isSave(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Detectors_SmokeDetector_all[] =
{
    "changeMode",
    "getLocation",
    "getMode",
    "getSensitivityLevel",
    "getSmokeDensity",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isSave",
    "notify",
    "setLocation",
    "setSensitivityLevel"
};

}

/// \cond INTERNAL
bool
Detectors::SmokeDetector::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Detectors_SmokeDetector_all, iceC_Detectors_SmokeDetector_all + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Detectors_SmokeDetector_all)
    {
        case 0:
        {
            return _iceD_changeMode(in, current);
        }
        case 1:
        {
            return _iceD_getLocation(in, current);
        }
        case 2:
        {
            return _iceD_getMode(in, current);
        }
        case 3:
        {
            return _iceD_getSensitivityLevel(in, current);
        }
        case 4:
        {
            return _iceD_getSmokeDensity(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        case 9:
        {
            return _iceD_isSave(in, current);
        }
        case 10:
        {
            return _iceD_notify(in, current);
        }
        case 11:
        {
            return _iceD_setLocation(in, current);
        }
        case 12:
        {
            return _iceD_setSensitivityLevel(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Detectors::SmokeDetector::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< SmokeDetector, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Detectors::SmokeDetector::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< SmokeDetector, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Detectors::_icePatchObjectPtr(SmokeDetectorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = SmokeDetectorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(SmokeDetector::ice_staticId(), v);
    }
}
/// \endcond

Lights::OutdoorLights::~OutdoorLights()
{
}

/// \cond INTERNAL
::Ice::Object* Lights::upCast(OutdoorLights* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Lights_OutdoorLights_ids[4] =
{
    "::Ice::Object",
    "::Interfaces::LightControl",
    "::Interfaces::SmartDevice",
    "::Lights::OutdoorLights"
};

}

bool
Lights::OutdoorLights::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Lights_OutdoorLights_ids, iceC_Lights_OutdoorLights_ids + 4, s);
}

::std::vector< ::std::string>
Lights::OutdoorLights::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Lights_OutdoorLights_ids[0], &iceC_Lights_OutdoorLights_ids[4]);
}

const ::std::string&
Lights::OutdoorLights::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Lights::OutdoorLights::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Lights::OutdoorLights";
    return typeId;
#else
    return iceC_Lights_OutdoorLights_ids[3];
#endif
}

/// \cond INTERNAL
bool
Lights::OutdoorLights::_iceD_adjustBrightness(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_level;
    istr->read(iceP_level);
    inS.endReadParams();
    this->adjustBrightness(iceP_level, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Lights::OutdoorLights::_iceD_getBrightnessLevel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getBrightnessLevel(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Lights_OutdoorLights_all[] =
{
    "adjustBrightness",
    "changeMode",
    "getBrightnessLevel",
    "getMode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isOn",
    "notify",
    "turnOff",
    "turnOn"
};

}

/// \cond INTERNAL
bool
Lights::OutdoorLights::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Lights_OutdoorLights_all, iceC_Lights_OutdoorLights_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Lights_OutdoorLights_all)
    {
        case 0:
        {
            return _iceD_adjustBrightness(in, current);
        }
        case 1:
        {
            return _iceD_changeMode(in, current);
        }
        case 2:
        {
            return _iceD_getBrightnessLevel(in, current);
        }
        case 3:
        {
            return _iceD_getMode(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_isOn(in, current);
        }
        case 9:
        {
            return _iceD_notify(in, current);
        }
        case 10:
        {
            return _iceD_turnOff(in, current);
        }
        case 11:
        {
            return _iceD_turnOn(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Lights::OutdoorLights::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< OutdoorLights, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Lights::OutdoorLights::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< OutdoorLights, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Lights::_icePatchObjectPtr(OutdoorLightsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = OutdoorLightsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(OutdoorLights::ice_staticId(), v);
    }
}
/// \endcond

Lights::GeneralLights::~GeneralLights()
{
}

/// \cond INTERNAL
::Ice::Object* Lights::upCast(GeneralLights* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Lights_GeneralLights_ids[4] =
{
    "::Ice::Object",
    "::Interfaces::LightControl",
    "::Interfaces::SmartDevice",
    "::Lights::GeneralLights"
};

}

bool
Lights::GeneralLights::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Lights_GeneralLights_ids, iceC_Lights_GeneralLights_ids + 4, s);
}

::std::vector< ::std::string>
Lights::GeneralLights::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Lights_GeneralLights_ids[0], &iceC_Lights_GeneralLights_ids[4]);
}

const ::std::string&
Lights::GeneralLights::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Lights::GeneralLights::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Lights::GeneralLights";
    return typeId;
#else
    return iceC_Lights_GeneralLights_ids[3];
#endif
}

/// \cond INTERNAL
bool
Lights::GeneralLights::_iceD_changeColor(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_color;
    istr->read(iceP_color);
    inS.endReadParams();
    this->changeColor(iceP_color, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Lights::GeneralLights::_iceD_getColor(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getColor(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Lights_GeneralLights_all[] =
{
    "changeColor",
    "changeMode",
    "getColor",
    "getMode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isOn",
    "notify",
    "turnOff",
    "turnOn"
};

}

/// \cond INTERNAL
bool
Lights::GeneralLights::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Lights_GeneralLights_all, iceC_Lights_GeneralLights_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Lights_GeneralLights_all)
    {
        case 0:
        {
            return _iceD_changeColor(in, current);
        }
        case 1:
        {
            return _iceD_changeMode(in, current);
        }
        case 2:
        {
            return _iceD_getColor(in, current);
        }
        case 3:
        {
            return _iceD_getMode(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_isOn(in, current);
        }
        case 9:
        {
            return _iceD_notify(in, current);
        }
        case 10:
        {
            return _iceD_turnOff(in, current);
        }
        case 11:
        {
            return _iceD_turnOn(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Lights::GeneralLights::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< GeneralLights, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Lights::GeneralLights::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< GeneralLights, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Lights::_icePatchObjectPtr(GeneralLightsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = GeneralLightsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(GeneralLights::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

namespace Ice
{
}

namespace Ice
{
}

namespace Ice
{
}

namespace Ice
{
}

#endif
